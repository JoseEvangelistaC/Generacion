@using Generacion.Models.DashBoard;
@using Generacion.Models.Usuario;
@using Generacion.Views.ControlGAS;
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Dashboard";
    List<DetalleOperario> listaOperario = ViewData["ListaOperarios"] as List<DetalleOperario>;

    Dictionary<decimal, DashboardDetalleFiltro> datosFiltroCentrifugo = ViewData["datosFiltroCentrifugo"] as Dictionary<decimal, DashboardDetalleFiltro>;
    Dictionary<decimal, DashboardDetalleFiltro> datosFiltroAutomatico = ViewData["datosFiltroAutomatico"] as Dictionary<decimal, DashboardDetalleFiltro>;

    ContratoGas datoContrato = ViewData["datoContrato"] as ContratoGas;
    ConsumoGas datosConsumo = ViewData["datosConsumo"] as ConsumoGas;
    DetalleConsumoGas datodetalleConsumo = ViewData["datodetalleConsumo"] as DetalleConsumoGas;

    decimal cantidadContratoGas = datoContrato != null ? datoContrato.ConsumoContrato : 0;

    int daysInMonth = DateTime.DaysInMonth(int.Parse(DateTime.Now.ToString("yyyy")), int.Parse(DateTime.Now.ToString("MM")));
}
<style>
    .hidden {
        display: none;
    }

    input {
        height: 23px;
        width: 100px;
        border: none;
    }

    .table td, .table th {
        padding: 0rem;
    }

    .table {
        margin: 0;
        color: black;
    }

        .table thead, .table tbody {
            text-align: center;
        }

    .contendor-tablas-iguales {
        display: flex;
    }

    #chart-container {
        position: relative;
    }

    #custom-tooltip {
        position: absolute;
        display: none;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    p {
        border: none;
        margin: 0;
    }

    #detalle-gas input {
        width: 60%;
        text-align: center;
    }

    #detalle-gas1 input {
        width: 60%;
        text-align: right;
        display: flex;
        justify-content: space-between;
    }

    #controlCambioAceite tbody td {
        border: none;
        border-top: 1px solid #e3e6f0;
    }

    #controlCambioAceite input {
        background: transparent;
    }

</style>
<div style="width: 58%;">
    <div id="div1">
        <table id="FiltroCentrifugo" class="table table-bordered">
            <thead style="text-align: center;">
                <tr>
                    <th rowspan="2">CAMBIO</th>
                    <th colspan="5">FILTRO CENTRIFUGO (1000 Hrs.)</th>
                </tr>
                <tr>
                    <th>UNIDAD</th>
                    <th>FECHA</th>
                    <th>Hrs. OP.</th>
                    <th>ESPESOR</th>
                    <th>EJECUTOR</th>
                </tr>
            </thead>
            <tbody>
                @if (datosFiltroCentrifugo != null && datosFiltroCentrifugo.ContainsKey(1))
                {
                    <tr id="FiltroCentrifugoEG1">
                        <td><input id-class="ProximaHoraCambio" id="ProximaHoraCambio1" type="number" value="@datosFiltroCentrifugo[1].ProximaHoraCambio" disabled></td>
                        <td style="display: flex;padding: 0 0 0 5px;"> EG<input style="width: 50px;" id-class="NumeroGenerador" type="number" min="1" max="2" disabled value="1"></td>
                        <td><input oninput="convertirYMostrarFecha('fechaInput')" id-class="fecha" id="fechaInput" value="@datosFiltroCentrifugo[1].Fecha.Split(' ')[0]"></td>
                        <td><input id-class="HorasOperacion" value="@datosFiltroCentrifugo[1].HorasOperacion" type="number" id="HorasOperacion1" oninput="actualizarProximaHora('1')"></td>
                        <td><input id-class="espesor" value="@datosFiltroCentrifugo[1].Espesor" type="number"></td>
                        <td style="display:flex;">
                            <input id-class="OperadorEjecutor" id="idOperarioEG1" value="@datosFiltroCentrifugo[1].OperadorEjecutor">
                            <select id="ListaOperariosEG1" style="height: 23px">
                                <option value="">-OP-</option>
                                @foreach (var item in listaOperario)
                                {
                                    <option value="@item.IdOperario">@(item.Apellidos + " " + item.Nombre)</option>
                                }
                            </select>
                        </td>
                    </tr>
                }
                else
                {
                    <tr id="FiltroCentrifugoEG1">
                        <td><input id-class="ProximaHoraCambio" id="ProximaHoraCambio1" type="number" disabled></td>
                        <td style="display: flex;padding: 0 0 0 5px;"> EG<input style="width: 50px;" id-class="NumeroGenerador" type="number" min="1" max="2" disabled value="1"></td>
                        <td><input oninput="convertirYMostrarFecha('fechaInput')" id-class="fecha" id="fechaInput"></td>
                        <td><input id-class="HorasOperacion" type="number" id="HorasOperacion1" oninput="actualizarProximaHora('1')"></td>
                        <td><input id-class="espesor" type="number"></td>
                        <td style="display:flex;">
                            <input id-class="OperadorEjecutor" id="idOperarioEG1">
                            <select id="ListaOperariosEG1" style="height: 23px">
                                <option value="">-OP-</option>
                                @foreach (var item in listaOperario)
                                {
                                    <option value="@item.IdOperario">@(item.Apellidos + " " + item.Nombre)</option>
                                }
                            </select>
                        </td>
                    </tr>
                }
                @if (datosFiltroCentrifugo != null && datosFiltroCentrifugo.ContainsKey(2))
                {
                    <tr id="FiltroCentrifugoEG2">
                        <td><input id-class="ProximaHoraCambio" id="ProximaHoraCambio2" type="number" disabled value="@datosFiltroCentrifugo[2].ProximaHoraCambio"></td>
                        <td style="display: flex;padding: 0 0 0 5px;">EG<input type="number" style="width: 50px;" id-class="NumeroGenerador" min="1" max="2" disabled value="2"></td>
                        <td><input oninput="convertirYMostrarFecha('fechaInput2')" id-class="fecha" id="fechaInput2" value="@datosFiltroCentrifugo[2].Fecha.Split(' ')[0]"></td>
                        <td><input id-class="HorasOperacion" type="number" id="HorasOperacion2" oninput="actualizarProximaHora('2')" value="@datosFiltroCentrifugo[2].HorasOperacion"></td>
                        <td><input id-class="espesor" type="number" value="@datosFiltroCentrifugo[2].Espesor"></td>
                        <td style="display:flex;">
                            <input id-class="OperadorEjecutor" id="idOperarioEG2" value="@datosFiltroCentrifugo[2].OperadorEjecutor">
                            <select id="ListaOperariosEG2" style="height: 23px">
                                <option value="">-OP-</option>
                                @foreach (var item in listaOperario)
                                {
                                    <option value="@item.IdOperario">@(item.Apellidos + " " + item.Nombre)</option>
                                }
                            </select>
                        </td>
                    </tr>
                }
                else
                {
                    <tr id="FiltroCentrifugoEG2">
                        <td><input id-class="ProximaHoraCambio" id="ProximaHoraCambio2" type="number" disabled></td>
                        <td style="display: flex;padding: 0 0 0 5px;">EG<input type="number" style="width: 50px;" id-class="NumeroGenerador" min="1" max="2" disabled value="2"></td>
                        <td><input oninput="convertirYMostrarFecha('fechaInput2')" id-class="fecha" id="fechaInput2"></td>
                        <td><input id-class="HorasOperacion" type="number" id="HorasOperacion2" oninput="actualizarProximaHora('2')"></td>
                        <td><input id-class="espesor" type="number"></td>
                        <td style="display:flex;">
                            <input id-class="OperadorEjecutor" id="idOperarioEG2">
                            <select id="ListaOperariosEG2" style="height: 23px">
                                <option value="">-OP-</option>
                                @foreach (var item in listaOperario)
                                {
                                    <option value="@item.IdOperario">@(item.Apellidos + " " + item.Nombre)</option>
                                }
                            </select>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            <div style="display: flex;text-align: center;">
                <p style="font-weight: bold;color: red;width: 20%;">BESS</p><p style="color: black;width: 80%;font-weight: bold;">DOMINGOS Y FERIADOS NO ACTIVAR</p>
            </div>
        </div>
    </div>
    <div id="div2" class="contendor-tablas-iguales">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th rowspan="2">Fecha</th>
                    <th colspan="2">HORAS DE BUJÍA</th>
                </tr>
                <tr>
                    <th>EG-1</th>
                    <th>EG-2</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th><input oninput="convertirYMostrarFecha()" id-class="fecha" type="text" /></th>
                    <td><input id-class="" type="number" /></td>
                    <td><input id-class="" type="number" /></td>
                </tr>
            </tbody>
        </table>

        <table id="FiltroAutomatico" class="table table-bordered">
            <thead>
                <tr>
                    <th rowspan="2">Fecha</th>
                    <th colspan="2">Filtro Automatico</th>
                </tr>
                @if (datosFiltroAutomatico != null && datosFiltroAutomatico.ContainsKey(1))
                {
                    <tr>
                        <th>EG-1</th>
                        <th><input id-class="HorasOperacion" type="number" id="HorasOperacion1" value="@datosFiltroAutomatico[1].HorasOperacion" /></th>
                    </tr>
                }
                else
                {
                    <tr>
                        <th>EG-1</th>
                        <th><input id-class="HorasOperacion" type="number" id="HorasOperacion1" /></th>
                    </tr>
                }
            </thead>
            <tbody>

                @if (datosFiltroAutomatico != null && datosFiltroAutomatico.ContainsKey(2))
                {
                    <tr>
                        <th><input oninput="convertirYMostrarFecha('fechaAutomatico',event)" id-class="fecha" id="fechaAutomatico" type="text" value="@datosFiltroAutomatico[1].Fecha.Split(' ')[0]" /></th>
                        <th>EG-2</th>
                        <td><input id-class="HorasOperacion" type="number" id="HorasOperacion2" value="@datosFiltroAutomatico[2].HorasOperacion" /></td>
                    </tr>
                }
                else
                {
                    <tr>
                        <th><input oninput="convertirYMostrarFecha('fechaAutomatico',event)" id-class="fechaAutomatico" id="fechaAutomatico" type="text" /></th>
                        <th>EG-2</th>
                        <td><input id-class="HorasOperacion" type="number" id="HorasOperacion2" /></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div id="div3" class="" style="border:1px solid;">
        <div style="font-weight: bold; text-align: center; display: flex; justify-content: space-between;">
            <span id="titulo-consumo-gas"></span>
            <div id="edit-Detalle-Gas" style="display: none;">
                <span style="font-size: 12px;">EDITAR</span>
                <input type="checkbox" id="checkEdt">
            </div>
        </div>
        <div id="contenedor-gas">
            <div id="custom-tooltip"></div>

            <div id="detalle-gas" style="display: none;">
                <table id="consumo-gas" class="table table-bordered">
                    <thead>
                        <tr>
                            <th>CONTRATO GAS</th>
                            <th>DIAS DEL MES</th>
                            <th>CONSUMO DIARIO</th>
                            <th>
                                <p>CONSUMO TOTAL</p>
                                <p>@DateTime.Now.ToString("dd/MM/yyyy")</p>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            @{
                                var resultadoFormateado = datoContrato != null ? datoContrato.ConsumoContrato.ToString("N2", new System.Globalization.CultureInfo("es-ES")) : "0";
                                resultadoFormateado = resultadoFormateado.Replace(".", "temp").Replace(",", ".").Replace("temp", ",");
                                <td><input id-tipo="decimal" id-table="@(datoContrato != null ? datoContrato.IdContratoGas : "")" id-class="consumoContrato" id="consumoContrato" oninput="obtenerConsumoPorContrato()" value="@resultadoFormateado"></td>


                                <td><input id-tipo="int" id-table="@(datosConsumo != null ? datosConsumo.IdConsumoGas : "")" id-class="diasMes" id="diasMes" value="@daysInMonth" disabled></td>

                                resultadoFormateado = datodetalleConsumo != null ? datodetalleConsumo.ConsumoDiario.ToString("N2", new System.Globalization.CultureInfo("es-ES")) : "0";
                                resultadoFormateado = resultadoFormateado.Replace(".", "temp").Replace(",", ".").Replace("temp", ",");
                                <td><input id-tipo="decimal" id-class="consumoDiario" id="consumoDiario" oninput="parsearCantidad('consumoDiario')" value="@(resultadoFormateado)"></td>

                                resultadoFormateado = datodetalleConsumo != null ? datodetalleConsumo.ConsumoTotalActual.ToString("N2", new System.Globalization.CultureInfo("es-ES")) : "0";
                                resultadoFormateado = resultadoFormateado.Replace(".", "temp").Replace(",", ".").Replace("temp", ",");
                                <td><input id-tipo="decimal" id-table="@(datosConsumo != null ? datosConsumo.IdConsumoGas : "")" id-class="consumoTotalActual" id="consumoTotal" oninput="obtenerConsumoFaltante()" value="@(resultadoFormateado)"> SM3</td>
                            }
                        </tr>
                        <tr>
                            <th colspan="2">CONSUMO GAS JUNIO</th>
                            <th colspan="2">CONSUMO FALTANTE</th>
                        </tr>
                        <tr>
                            @{
                                resultadoFormateado = datosConsumo != null ? datosConsumo.ConsumoDelMes.ToString("N2", new System.Globalization.CultureInfo("es-ES")) : "0";
                                resultadoFormateado = resultadoFormateado.Replace(".", "temp").Replace(",", ".").Replace("temp", ",");
                                <td colspan="2"><input id-tipo="decimal" id-table="@(datosConsumo != null ? datosConsumo.IdConsumoGas: "")" id-class="consumoDelMes" id="consumoDelMes" oninput="obtenerConsumoPorMes()" value="@(resultadoFormateado)"> SM3</td>
                                if (datosConsumo != null && datodetalleConsumo != null)
                                {
                                    var resultadoOperacion = datosConsumo.ConsumoDelMes - datodetalleConsumo.ConsumoTotalActual;
                                    resultadoFormateado = resultadoOperacion.ToString("N2", new System.Globalization.CultureInfo("es-ES"));
                                    resultadoFormateado = resultadoFormateado.Replace(".", "temp").Replace(",", ".").Replace("temp", ",");

                                    <td colspan="2" id="consumoFaltante">@resultadoFormateado SM3</td>
                                }
                                else
                                {
                                    <td colspan="2" id="consumoFaltante">0 SM3</td>

                                }
                            }
                        </tr>
                    </tbody>
                </table>
            </div>
            <div id="chart-container">
                <canvas id="myChart" style="width:400px; height:200px;"></canvas>
            </div>
        </div>
    </div>

    <div id="div4">
        <div>
            <table id="control-cambio-aceite" class="table table-bordered">
                <thead>
                    <tr>
                        <th></th>
                        <th colspan="7">CONTROL CAMBIO DE ACEITE GENERADOR CADA 5000 Hrs</th>
                    </tr>
                    <tr>
                        <th></th>
                        <th>H. OP</th>
                        <th>H. Cambio N</th>
                        <th>H. Cambio ND</th>
                        <th>F. Cambio N</th>
                        <th>F. Cambio ND</th>
                        <th>H. Restante N</th>
                        <th>H. Restante ND</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>EG1</td>
                        <td><input id-class="horasOperacion" type="number" /></td>
                        <td><input id-class="horasCambio" tipo-Comp="N" type="number" /></td>
                        <td><input id-class="horasCambio" tipo-Comp="ND" type="number" /></td>
                        <td><input id-class="fechaCambio" tipo-Comp="N" /></td>
                        <td><input id-class="fechaCambio" tipo-Comp="ND" /></td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>EG2</td>
                        <td><input id-class="horasOperacion" type="number" /></td>
                        <td><input id-class="horasCambio" tipo-Comp="N" type="number" /></td>
                        <td><input id-class="horasCambio" tipo-Comp="ND" type="number" /></td>
                        <td><input id-class="fechaCambio" tipo-Comp="N" /></td>
                        <td><input id-class="fechaCambio" tipo-Comp="ND" /></td>
                        <td></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>

    </div>

    <button onclick="DatosControlCambioAceite()">Obtener Valores</button>
</div>

<script src="./vendor/chart.js/Chart.min.js"></script>
<script>


    function DatosControlCambioAceite() {
        var datosControlAceite = [];
        var tabla = document.getElementById("control-cambio-aceite");
        var filasTr = Array.from(tabla.querySelector('tbody').getElementsByTagName('tr'));

        let contador = 1;
        filasTr.forEach(function (fila) {
            var dato = obtenerValoresFilaControlAceite(fila, contador);
   
            datosControlAceite = datosControlAceite.concat(dato);
            contador++;
        });
        console.log("datosContrato : ", datosControlAceite);

       guardarDatosControl('@Url.Action("GuardarDatosControlAceite", "Home")', datosControlAceite);
    }

 
    function obtenerValoresFilaControlAceite(fila, contador) {
        var controlAceiteN = {
            "idControlCambioAceite": "",
            "horasCambio": 0,
            "numeroGenerador": 0,
            "tipo": "N",
            "fechaCambio": ""
        };
        var controlAceiteND = {
            "idControlCambioAceite": "",
            "horasCambio": 0,
            "numeroGenerador": 0,
            "tipo": "ND",
            "fechaCambio": ""
        };
        var valores = [];

        for (var i = 0; i < fila.cells.length; i++) {

            var input = fila.cells[i].querySelector('input');

            if (input != null) {
                var idClass = input.getAttribute("id-class");
                var tipoComponente = input.getAttribute("tipo-Comp");
                console.log("contador : ", contador);
                controlAceiteN["numeroGenerador"] = parseFloat(contador);
                controlAceiteND["numeroGenerador"] = parseFloat(contador);
                controlAceiteN["idControlCambioAceite"] =datosOperario.IdSitio +"-Control-Aceite-N-" + contador +"-"+ obtenerFecha("format");
                controlAceiteND["idControlCambioAceite"] = datosOperario.IdSitio + "-Control-Aceite-ND-" + contador + "-" + obtenerFecha("format");
                if (tipoComponente === "N") {
                    if (input.type === 'number') {
                        controlAceiteN[idClass] = parseFloat(input.value);
                    } else {
                        controlAceiteN[idClass] = input.value;
                    }
                } else if (tipoComponente === "ND") {
                    if (input.type === 'number') {
                        controlAceiteND[idClass] = parseFloat(input.value);
                    } else {
                        controlAceiteND[idClass] = input.value;
                    }
                }
            }
        }
        valores.push(controlAceiteN);
        valores.push(controlAceiteND);

        return valores;
    }


    /************CONTROL CONSUMO GAS*************/


    var consumoGASMes = parseFloat(@Html.Raw(JsonConvert.SerializeObject(datosConsumo != null ? datosConsumo.ConsumoDelMes : 0)));
    var contratoAnteriorGAS = parseFloat(@Html.Raw(JsonConvert.SerializeObject(datoContrato != null ? datoContrato.ConsumoContrato: 0)));


    function DatosConsumoGas() {

        var tabla = document.getElementById("consumo-gas");
        var filasTr = Array.from(tabla.querySelector('tbody').getElementsByTagName('tr'));

        filasTr.forEach(function (fila) {
            obtenerValoresFilaGAS(fila);
        });

        guardarDatosControl('@Url.Action("GuardarContratoGAS", "Home")', datosContrato);
        guardarDatosControl('@Url.Action("GuardarDatosGAS", "Home")', datosConsumoGas);
        guardarDatosControl('@Url.Action("GuardarDetalleGAS", "Home")', datosDetalleGas);

    }

    function guardarDatosControl(url, datos) {
        fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(datos)
        })
            .then(function (response) {
                return response.json();
            })
            .then(function (data) {
                mostrarMensaje(data);
            })
            .catch(function (error) {
                console.error("Error:", error);
                mostrarError();
            });
    }

    function mostrarMensaje(data) {
        if (data.respuesta.idRespuesta === 0 || data.respuesta.idRespuesta === 1) {
            Swal.fire({
                title: "Success!!",
                text: "Se guardaron los datos.",
                icon: "success",
                button: "Aww yiss!"
            });
        } else {
            Swal.fire({
                title: "Error",
                text: data.respuesta.mensaje,
                icon: "error",
                button: "OK",
            });
        }
    }

    function mostrarError() {
        Swal.fire({
            title: "Error",
            text: "Error en la solicitud.",
            icon: "error",
            button: "OK",
        });
    }

    // Resto del código ...



    var datosContrato = {
        "idContratoGas": "",
        "consumoContrato": "",
        "activo": 0
    };

    var datosConsumoGas = {
        "idConsumoGas": "",
        "diasMes": 0,
        "consumoDelMes": 0,
        "idContratoGas": ""
    };

    var datosDetalleGas = {
        "IdDetalleConsumoGas": "",
        "consumoTotalActual": 0,
        "consumoDiario": 0
    };



    function obtenerValoresFilaGAS(fila) {
        var valores = {};

        for (var i = 0; i < fila.cells.length; i++) {
            var input = fila.cells[i].querySelector('input');
            if (input != null) {
                var idClass = input.getAttribute("id-class");

                var idTabla = input.getAttribute("id-table");
                var idTipo = input.getAttribute("id-tipo");

                var datoParseado = input.value.replace(/,/g, '');

                if (datosContrato && datosContrato.hasOwnProperty(idClass)) {
                    datosContrato[idClass] = parseFloat(datoParseado);
                    datosContrato["idContratoGas"] = idTabla != "" ? idTabla : datosOperario.IdSitio + "-Contracto-Gas-" + obtenerFecha("format");

                    if (parseFloat(contratoAnteriorGAS) != 0 && parseFloat(contratoAnteriorGAS) !== parseFloat(datoParseado)) {
                        datosContrato["idContratoGas"] = datosOperario.IdSitio + "-Contracto-Gas-" + obtenerFecha("format");
                        datosContrato["activo"] = 1;
                    }
                }

                if (datosConsumoGas && datosConsumoGas.hasOwnProperty(idClass)) {

                    if (idTipo === "decimal") {
                        datosConsumoGas[idClass] = parseFloat(datoParseado);
                    } else if (idTipo === "int") {
                        datosConsumoGas[idClass] = parseInt(datoParseado);
                    } else {
                        datosConsumoGas[idClass] = datoParseado;
                    }

                    datosConsumoGas["idConsumoGas"] = idTabla != "" ? idTabla : datosOperario.IdSitio + "-Consumo-Gas-" + obtenerFecha("format");
                    datosConsumoGas["idContratoGas"] = datosContrato["idContratoGas"];

                    if (parseFloat(consumoGASMes) !== parseFloat(datoParseado)) {
                        datosConsumoGas["idConsumoGas"] = datosOperario.IdSitio + "-Consumo-Gas-" + obtenerFecha("format");
                    }

                }
                console.log("datosDetalleGas : ", datosConsumoGas["idConsumoGas"]);

                if (datosDetalleGas && datosDetalleGas.hasOwnProperty(idClass)) {
                    if (idTipo === "decimal") {
                        datosDetalleGas[idClass] = parseFloat(datoParseado);
                    } else if (idTipo === "int") {
                        datosDetalleGas[idClass] = parseInt(datoParseado);
                    } else {
                        datosDetalleGas[idClass] = datoParseado;
                    }

                    datosDetalleGas["IdDetalleConsumoGas"] = datosOperario.IdSitio + "-Detalle-Gas-" + obtenerFecha("format");
                    datosDetalleGas["idConsumoGas"] = idTabla != "" ? idTabla : datosOperario.IdSitio + "-Consumo-Gas-" + obtenerFecha("format");

                    console.log("datosDetalleGas : ", datosDetalleGas);
                }
            }
        }
    }


    function obtenerConsumoPorContrato() {
        var diasMes = document.getElementById("diasMes");
        var consumoContrato = document.getElementById("consumoContrato");
        var consumoDelMes = document.getElementById("consumoDelMes");

        var decimal = "";
        if (consumoContrato.value.includes('.')) {
            decimal = "." + consumoContrato.value.split('.')[1].replace(/[^0-9,]/g, '');
            consumoContrato.value = consumoContrato.value.split('.')[0];
        }

        consumoContrato.value = consumoContrato.value.replace(/[^0-9,]/g, '');

        if (consumoContrato.value != null && consumoContrato.value != "") {
            var valorSinComas = parseFloat(consumoContrato.value.replace(/,/g, ''));

            consumoContrato.value = valorSinComas.toLocaleString() + decimal;
            consumoDelMes.value = (parseFloat(consumoContrato.value.replace(/,/g, '')) * parseFloat(diasMes.value)).toLocaleString();
        } else {
            consumoDelMes.value = 0;
        }
    }

    function obtenerConsumoPorMes() {
        var diasMes = document.getElementById("diasMes");
        var consumoContrato = document.getElementById("consumoContrato");
        var consumoDelMes = document.getElementById("consumoDelMes");

        var decimal = "";
        if (consumoDelMes.value.includes('.')) {
            decimal = "." + consumoDelMes.value.split('.')[1].replace(/[^0-9,]/g, '');
            consumoDelMes.value = consumoDelMes.value.split('.')[0];
        }
        consumoDelMes.value = consumoDelMes.value.replace(/[^0-9,]/g, '');


        if (consumoDelMes.value != null && consumoDelMes.value != "") {
            var valorSinComas = parseFloat(consumoDelMes.value.replace(/,/g, ''));

            consumoDelMes.value = valorSinComas.toLocaleString() + decimal;
            consumoContrato.value = (parseFloat(valorSinComas + decimal) / parseFloat(diasMes.value)).toLocaleString();

            obtenerConsumoFaltante(valorSinComas);

        } else {
            consumoDelMes.value = 0;
        }
    }

    function obtenerConsumoFaltante(valor) {
        var consumoTotal = document.getElementById("consumoTotal");
        var consumoFaltante = document.getElementById("consumoFaltante");

        var decimal = "";
        if (consumoTotal.value.includes('.')) {
            decimal = "." + consumoTotal.value.split('.')[1].replace(/[^0-9,]/g, '');
            consumoTotal.value = consumoTotal.value.split('.')[0];
        }
        consumoTotal.value = consumoTotal.value.replace(/[^0-9,]/g, '');

        var consumoTotalSinComas = 0;
        if (consumoTotal.value != "") {
            consumoTotalSinComas = parseFloat(consumoTotal.value.replace(/,/g, ''));
        }

        if (valor != undefined && valor.value != 0) {

            consumoTotal.value = consumoTotalSinComas.toLocaleString() + decimal;

            consumoFaltante.innerText = (valor - consumoTotalSinComas).toLocaleString() + ' SM3';
        } else {
            var consumoDelMes = document.getElementById("consumoDelMes");
            var consumoDelMesSinComas = parseFloat(consumoDelMes.value.replace(/,/g, ''));

            consumoTotal.value = consumoTotalSinComas.toLocaleString() + decimal;
            consumoFaltante.innerText = (consumoDelMesSinComas - consumoTotalSinComas).toLocaleString() + ' SM3';
        }
    }

    function parsearCantidad(consumoDiario) {
        var input = document.getElementById(consumoDiario);

        var decimal = "";
        if (input.value.includes('.')) {
            decimal = "." + input.value.split('.')[1].replace(/[^0-9,]/g, '');
            input.value = input.value.split('.')[0];
            console.log("input.value ", input.value);
        }
        input.value = input.value.replace(/[^0-9,]/g, '');

        if (input != null && input.value != "") {
            var valorSinComas = parseFloat(input.value.replace(/,/g, ''));

            input.value = valorSinComas.toLocaleString() + decimal;
        } else {
            input.value = "0";
        }
    }

    /**************DATOS FILTRO AUTOMATICO Y CENTRIFUGO********** */

    function DatosFiltroAutomatico() {
        var tabla = document.getElementById("FiltroAutomatico");
        var inputFecha = document.getElementById("fechaAutomatico");

        var valores1 = {
            "IdReporteFiltro": datosOperario.IdSitio + "-AUTOMATICO-O&M-FOR-01-" + obtenerFecha("format"),
            "IdDetalleFiltro": datosOperario.IdSitio + "-FiltroAutomatico-1-" + obtenerFecha("format"),
            "OperadorEjecutor": "NO APLICA",
            "fecha": inputFecha.value,
            "NumeroGenerador": 1
        };
        var valores2 = {
            "IdReporteFiltro": datosOperario.IdSitio + "-AUTOMATICO-O&M-FOR-01-" + obtenerFecha("format"),
            "IdDetalleFiltro": datosOperario.IdSitio + "-FiltroAutomatico-2-" + obtenerFecha("format"),
            "OperadorEjecutor": "NO APLICA",
            "fecha": inputFecha.value,
            "NumeroGenerador": 2
        };

        // Obtener todos los elementos input dentro de la tabla
        var inputs = tabla.querySelectorAll('input');

        // Recorrer cada elemento input
        inputs.forEach(function (input) {
            // Obtener el número (1 o 2) del id del input
            var numero = input.id.match(/\d+/);
            console.log("numero :", numero);

            // Verificar si el input tiene un número en su id
            if (numero) {
                // Verificar si es el primer objeto (valores1) o el segundo objeto (valores2)
                if (numero[0] === '1') {
                    valores1[input.getAttribute('id-class')] = input.value;
                } else if (numero[0] === '2') {
                    valores2[input.getAttribute('id-class')] = input.value;
                }
            } else {
                valores1[input.getAttribute('id-class')] = input.value;
                valores2[input.getAttribute('id-class')] = input.value;
            }
        });
        var datos = [];
        datos.push(valores1);
        datos.push(valores2);

        guardarDatosControl('@Url.Action("GuardarDatosDashBoard", "Home")', datos);
    }








    function actualizarProximaHora(number) {
        var horasOperacion = document.getElementById("HorasOperacion" + number);
        var idOperarioTrabajo = document.getElementById("ProximaHoraCambio" + number);

        idOperarioTrabajo.value = parseInt(horasOperacion.value) + 1000;
    }


    var idOperarioTrabajo = document.getElementById("ListaOperariosEG1");
    idOperarioTrabajo.addEventListener('change', obtenerOperariosSeleccionados);
    var idOperarioTrabajo2 = document.getElementById("ListaOperariosEG2");
    idOperarioTrabajo2.addEventListener('change', obtenerOperariosSeleccionados2);

    function obtenerOperariosSeleccionados() {
        var selectedOption = this.options[this.selectedIndex];
        var id = selectedOption.value;

        if (id != "") {
            var nombreApellido = selectedOption.text.split(' ');
            if (nombreApellido.length < 2) {
                nombreApellido[1] = " ";
            }
            var inputOperario = document.getElementById("idOperarioEG1");

            inputOperario.value = inputOperario.value == "" ? nombreApellido[0][0] + nombreApellido[1][0] : inputOperario.value + '/' + nombreApellido[0][0] + nombreApellido[1][0];
            this.selectedIndex = 0;
        }
    }
    function obtenerOperariosSeleccionados2() {
        var selectedOption = this.options[this.selectedIndex];
        var id = selectedOption.value;

        if (id != "") {
            var nombreApellido = selectedOption.text.split(' ');
            if (nombreApellido.length < 2) {
                nombreApellido[1] = " ";
            }
            var inputOperario = document.getElementById("idOperarioEG2");

            inputOperario.value = inputOperario.value == "" ? nombreApellido[0][0] + nombreApellido[1][0] : inputOperario.value + '/' + nombreApellido[0][0] + nombreApellido[1][0];
            this.selectedIndex = 0;
        }
    }


    //para obtener los valores de los inputs en general
    function guardarDatosFiltro() {
        var datos = DatosFiltro();

        guardarDatosControl('@Url.Action("GuardarDatosDashBoard", "Home")', datos);
    }

    function DatosFiltro() {
        var tabla = document.getElementById("FiltroCentrifugo");
        var filasTr = tabla.querySelector('tbody').getElementsByTagName('tr');
        var datos = [];
        for (var i = 0; i < filasTr.length; i++) {
            var valores = obtenerValoresFila(filasTr[i]);
            valores["IdReporteFiltro"] = datosOperario.IdSitio + "-CENTRIFUGO-O&M-FOR-01-" + obtenerFecha("format");
            valores["IdDetalleFiltro"] = datosOperario.IdSitio + "-FiltroCentrifugo-" + i + 1 + "-" + obtenerFecha("format");
            datos.push(valores);
        }
        return datos;
    }



    function obtenerValoresFila(fila) {
        var valores = {};

        for (var i = 0; i < fila.cells.length; i++) {
            var input = fila.cells[i].querySelector('input');
            var idClass = input.getAttribute("id-class");

            if (input.value === "") {
                input.focus();
            } else {
                if (input.type === 'number') {
                    valores[idClass] = parseFloat(input.value);
                } else {
                    valores[idClass] = input.value;
                }
            }
        }

        return valores;
    }


</script>

<script>
    /*
     activar para la continuidad de los divs
    var intervalId;
     var currentDiv = 1;
     var totalDivs = 2; // Actualizar el número total de divs

     window.onload = function () {
         startAutoToggle();
     };

     function toggleVisibility() {
         clearInterval(intervalId);
         currentDiv = (currentDiv % totalDivs) + 1;
         showDiv();
         intervalId = setInterval(function () {
             currentDiv = (currentDiv % totalDivs) + 1;
             showDiv();
         }, 5000);
     }

     function startAutoToggle() {
         intervalId = setInterval(function () {
             currentDiv = (currentDiv % totalDivs) + 1;
             showDiv();
         }, 1000);
     }

     function showDiv() {
         for (var i = 1; i <= totalDivs; i++) {

             var div = document.getElementById('div' + i);
             console.log("div ", div);
             if (i === currentDiv) {
                 div.classList.remove('hidden');
             } else {
                 div.classList.add('hidden');
             }
         }
     }*/
</script>

<script>
    /*********Chart ***************/
    document.addEventListener('DOMContentLoaded', function () {

        var tituloConsumoGas = document.getElementById("titulo-consumo-gas");
        tituloConsumoGas.innerText = "CONSUMO DE GAS " + datosOperario.IdSitio + " Sm3";

        /*

            ContratoGas datoContrato = ViewData["datoContrato"] as ContratoGas;
            ConsumoGas datosConsumo = ViewData["datosConsumo"] as ConsumoGas;
            DetalleConsumoGas datodetalleConsumo = ViewData["datodetalleConsumo"] as DetalleConsumoGas;

        */
        // Datos proporcionados
        var totalConsumir = parseFloat(@Html.Raw(JsonConvert.SerializeObject(datosConsumo != null ? datosConsumo.ConsumoDelMes : 0)));// 2141952;
        var consumoDiario = parseFloat(@Html.Raw(JsonConvert.SerializeObject(datodetalleConsumo != null ? datodetalleConsumo.ConsumoDiario : 0))); //60105;
        var consumoHastaFecha = parseFloat(@Html.Raw(JsonConvert.SerializeObject(datodetalleConsumo != null ? datodetalleConsumo.ConsumoTotalActual : 0)));//1910196;
        var consumoFaltante = totalConsumir - consumoHastaFecha;//231756;

        // Calcular porcentaje completado y faltante
        var porcentajeCompletado = (consumoHastaFecha / totalConsumir) * 100;
        var porcentajeFaltante = (consumoFaltante / totalConsumir) * 100;

        // Datos para el gráfico de medialuna
        var data = {
            labels: [porcentajeCompletado.toFixed(2) + '% Completado', porcentajeFaltante.toFixed(2) + '% Faltante', 'Consumo Diario : ' + consumoDiario],
            datasets: [{
                data: [porcentajeCompletado, porcentajeFaltante],
                backgroundColor: ['rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)'],
                borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],
                borderWidth: 1
            }]
        };

        var options = {
            cutoutPercentage: 30,
            circumference: Math.PI,
            rotation: -Math.PI,
            animation: {
                animateRotate: true,
                animateScale: true
            },
            legend: {
                display: true,
                position: 'right',
                labels: {
                    fontSize: 20
                }
            },
            tooltips: {
                enabled: false,
                custom: function (tooltipModel) {
                    // Personalizar la apariencia del tooltip aquí
                    var customTooltip = document.getElementById('custom-tooltip');
                    var chartContainer = document.getElementById('chart-container');

                    if (tooltipModel.body) {
                        var label = tooltipModel.body[0].lines[0]; // Obtener el label del tooltip

                        // Mostrar el div personalizado solo si hay un label
                        customTooltip.style.display = 'block';
                        customTooltip.style.left = tooltipModel.caretX + chartContainer.offsetLeft + 'px';
                        customTooltip.style.top = tooltipModel.caretY + chartContainer.offsetTop + 'px';
                        customTooltip.innerHTML = label;
                    } else {
                        customTooltip.style.display = 'none';
                    }
                }
            },
            onHover: function (event, chartElement) {
                var customTooltip = document.getElementById('custom-tooltip');
                var chartContainer = document.getElementById('chart-container');

                if (chartElement.length > 0) {
                    var position = chartElement[0]._model;
                    customTooltip.style.display = 'block';
                    customTooltip.style.left = position.x + chartContainer.offsetLeft + 'px';
                    customTooltip.style.top = position.y + chartContainer.offsetTop + 'px';

                    if (chartElement[0]._index === 0) {
                        customTooltip.innerHTML = 'Completado: ' + consumoHastaFecha + ' SM3';
                    } else {
                        customTooltip.innerHTML = 'Faltante: ' + consumoFaltante + ' SM3';
                    }
                } else {
                    customTooltip.style.display = 'none';
                }
            },
            responsive: true, // Permite que el gráfico sea responsive
            maintainAspectRatio: false, // Desactiva el mantenimiento del aspecto para personalizar el tamaño
            aspectRatio: 2 // Define la relación de aspecto personalizada (puedes ajustar este valor)
        };

        // Crear el gráfico de medialuna
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'doughnut',
            data: data,
            options: options
        });
    });

    document.getElementById('contenedor-gas').onclick = function () {
        mostrarDetalleGas();
    };

    function mostrarDetalleGas() {
        var contenedorChart = document.getElementById('chart-container');
        var contenedorDetalleGas = document.getElementById('detalle-gas');
        var checkDetalle = document.getElementById('edit-Detalle-Gas');

        // Verificar la visibilidad actual de los contenedores
        var chartVisible = window.getComputedStyle(contenedorChart).display !== 'none';
        var detalleGasVisible = window.getComputedStyle(contenedorDetalleGas).display !== 'none';

        if (detalleGasVisible) {
            // Si el detalle de gas está visible, ocultarlo y mostrar el gráfico
            contenedorDetalleGas.style.display = 'none';
            checkDetalle.style.display = "none";
            contenedorChart.style.display = 'block';
        } else if (chartVisible) {
            // Si el gráfico está visible, ocultarlo y mostrar el detalle de gas
            contenedorChart.style.display = 'none';
            checkDetalle.style.display = "flex";
            contenedorDetalleGas.style.display = 'block';
        }
    }


    $('input[id^="checkEdt"]').change(function () {
        var contendorDetalleGas = document.getElementById('contenedor-gas');

        // Verificar si el checkbox está marcado o no
        if (this.checked) {
            // Agregar la función o lógica que deseas cuando el checkbox está marcado
            contendorDetalleGas.addEventListener('click', mostrarDetalleGas);
        } else {
            // Quitar la función cuando el checkbox no está marcado
            contendorDetalleGas.removeEventListener('click', mostrarDetalleGas);
        }
    });
</script>


